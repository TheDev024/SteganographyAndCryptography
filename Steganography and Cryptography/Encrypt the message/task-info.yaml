type: edu
files:
- name: src/cryptography/Main.kt
  visible: true
  text: |
    package cryptography

    import java.awt.Color
    import java.io.File
    import java.util.*
    import javax.imageio.ImageIO
    import kotlin.math.pow

    /**
     * Java scanner
     */
    val scanner: Scanner = Scanner(System.`in`)

    /**
     * Cryptography and Steganography message encoder and decoder
     */
    class SteganographyAndCryptography {

        /**
         * class cmd controller
         */
        fun cmd() {
            while (true) {
                println("Task (hide, show, exit):")
                when (val input = readln()) {
                    "hide" -> hide()

                    "show" -> show()

                    "exit" -> break

                    else -> println("Wrong task: $input")
                }
            }

            println("Bye!")
        }

        /**
         * Gets path of input image and decodes message from it
         */
        private fun show() {
            println("Input image file:")
            val imgPath = scanner.nextLine()

            val file = File(imgPath)
            val image = ImageIO.read(file)

            var encodedMessage = byteArrayOf()
            val byte = mutableListOf<Int>()

            repeat(image.height) imageIterator@{ y ->
                repeat(image.width) { x ->
                    val pixel = image.getRGB(x, y)
                    val bit = Color(pixel).blue % 2
                    byte.add(bit)
                    if (byte.size == 8) {
                        var newByte = 0
                        for (b in byte.indices) newByte += byte.reversed()[b] * 2.0.pow(b).toInt()
                        encodedMessage = encodedMessage.plus(newByte.toByte())
                        byte.clear()
                    }
                }
            }
            for (i in 0..encodedMessage.lastIndex - 2) if (encodedMessage.slice(i..i + 2) == listOf<Byte>(
                    0, 0, 3
                )
            ) {
                encodedMessage = encodedMessage.slice(0 until i).toByteArray()
                break
            }

            val message = encodedMessage.toString(Charsets.UTF_8)
            println("Message:\n$message")
        }

        /**
         * Gets path of input image and encodes the message into it
         */
        private fun hide() {
            println("Input image file:")
            val inputImg = scanner.nextLine()

            println("Output image file:")
            val outputImg = scanner.nextLine()

            val inputFile = File(inputImg)
            if (inputFile.exists()) {
                println("Message to hide:")
                val message = scanner.nextLine()
                val encodedMessage = message.encodeToByteArray() + byteArrayOf(0, 0, 3)

                val image = ImageIO.read(inputFile)
                val size = image.width * image.height

                if (encodedMessage.size * 8 <= size) {
                    val bits = mutableListOf<Boolean>()
                    encodedMessage.forEach { byte ->
                        val newByte = mutableListOf<Boolean>()
                        repeat(8) { i ->
                            val bit = (byte / 2.0.pow(i).toInt()) % 2
                            newByte.add(bit != 0)
                        }
                        bits.addAll(newByte.reversed())
                    }

                    var index = 0
                    iterator@ for (y in 0 until image.height) for (x in 0 until image.width) {
                        val pixel = image.getRGB(x, y)
                        val color = Color(pixel)
                        val b = if (bits[index++]) color.blue or 1 else color.blue and 0b11111110
                        val newColor = Color(color.red, color.green, b)
                        image.setRGB(x, y, newColor.rgb)
                        if (index == bits.size) break@iterator
                    }
                    val outputFile = File(outputImg.replace('/', File.separatorChar))
                    ImageIO.write(image, "png", outputFile)
                    println("Message saved in $outputImg image.")
                } else println("The input image is not large enough to hold this message.")
            } else println("Can't read input file!")
        }
    }

    fun main() {
        val crypto = SteganographyAndCryptography()
        crypto.cmd()
    }
  learner_created: false
- name: test/small.png
  visible: false
  learner_created: false
- name: test/SteganographyTest.kt
  visible: false
  text: |+
    import org.hyperskill.hstest.dynamic.DynamicTest
    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testing.TestedProgram
    import java.awt.Color
    import java.awt.image.BufferedImage
    import java.io.File
    import java.security.MessageDigest
    import javax.imageio.ImageIO

    class SteganographyTest: StageTest<Any>() {
        @DynamicTest
        fun imageCreateTest(): CheckResult {
            val main = TestedProgram()
            var outputString = main.start().toLowerCase().trim()
            if (!outputString.contains("task (hide, show, exit):")) {
                return CheckResult(false, "Prompt \"Task (hide, show, exit):\" is missing.")
            }

            outputString = main.execute("hide").toLowerCase().trim()
            if (!outputString.contains("input image file:")) {
                return CheckResult(false, "Wrong output after the \"hide\" command.")
            }

            try {
                val infile = "test/testimage.png"
                val inputFile = File(infile)
                if (!inputFile.exists()) {
                    return CheckResult(false, "Input test image file doesn't exist. Try reloading the project.")
                }
                val inputImage: BufferedImage = ImageIO.read(inputFile)
                if (imageHash(inputImage) != "cc5bc38fad61e51b44ec7731f49ae2e290c06f55") {
                    return CheckResult(false, "Input test image file is corrupted. Try reloading the project.")
                }

                outputString = main.execute(infile).toLowerCase().trim()
                if (!outputString.contains("output image file:")) {
                    return CheckResult(false, "Wrong output after inserting the input filename.")
                }

                val outfile = "test/out.png"
                outputString = main.execute(outfile).toLowerCase().trim()
                if (!outputString.contains("message to hide:")) {
                    return CheckResult(false, "Wrong output after inserting the output filename.")
                }

                val message = "Hyperskill steganography program."
                outputString = main.execute(message).toLowerCase().trim()
                if (!outputString.contains("password:")) {
                    return CheckResult(false, "Wrong output after inserting the message.")
                }

                val password = "mypassword"
                outputString = main.execute("mypassword").toLowerCase().trim()
                if ( ( !outputString.contains("message saved")
                    && outputString.contains("task (hide, show, exit):") ) ) {
                    return CheckResult(false, "Wrong output after inserting the password.")
                }

                val outputFile = File(outfile)
                if (!outputFile.exists()) {
                    return CheckResult(false, "Image file $outfile hasn't been created.")
                }
                val outputImage: BufferedImage = ImageIO.read(outputFile)
                if (imageHash(outputImage) != "cbe82b64ab5f3641afc22e8c9b688902506b3444") {
                    return CheckResult(false, "Wrong output file. Wrong output image hash.")
                }

                outputString = main.execute("show").toLowerCase().trim()
                if (!outputString.contains("input image file:")) {
                    return CheckResult(false, "Wrong output after the \"show\" command.")
                }

                outputString = main.execute(outfile).toLowerCase().trim()
                if (!outputString.contains("password:")) {
                    return CheckResult(false, "Wrong output after inserting the message.")
                }

                outputString = main.execute(password).toLowerCase().trim()
                if (!( outputString.contains("message:") && outputString.contains(message.toLowerCase()) &&
                            outputString.contains("task (hide, show, exit):") ) ) {
                    return CheckResult(false, "Wrong output after inserting the input filename.")
                }
            } catch (e: Exception) {
                return CheckResult(false, e.message)
            }

            outputString = main.execute("exit").toLowerCase().trim()
            if (!outputString.contains("bye!")) {
                return CheckResult(false, "Wrong output after the \"exit\" command.")
            }

            if (!main.isFinished) {
                return CheckResult(false, "Program has not terminated after the \"exit\" command.")
            }

            return CheckResult(true, "")
        }

        @DynamicTest
        fun smallImageTest(): CheckResult {
            val main = TestedProgram()
            var outputString = main.start().toLowerCase().trim()
            if (!outputString.contains("task (hide, show, exit):")) {
                return CheckResult(false, "Prompt \"Task (hide, show, exit):\" is missing.")
            }

            outputString = main.execute("hide").toLowerCase().trim()
            if (!outputString.contains("input image file:")) {
                return CheckResult(false, "Wrong output after the \"hide\" command.")
            }

            try {
                val infile = "test/small.png"
                val inputFile = File(infile)
                if (!inputFile.exists()) {
                    return CheckResult(false, "Input test image file doesn't exist. Try reloading the project.")
                }
                val inputImage: BufferedImage = ImageIO.read(inputFile)
                if (imageHash(inputImage) != "c4679ca63e03c377de73ab3aaede91f37a0d50b6") {
                    return CheckResult(false, "Input test image file is corrupted. Try reloading the project.")
                }

                outputString = main.execute(infile).toLowerCase().trim()
                if (!outputString.contains("output image file:")) {
                    return CheckResult(false, "Wrong output after inserting the input filename.")
                }

                val outfile = "test/out2.png"
                outputString = main.execute(outfile).toLowerCase().trim()
                if (!outputString.contains("message to hide:")) {
                    return CheckResult(false, "Wrong output after inserting the output filename.")
                }

                val message = "Hyperskill steganography program."
                outputString = main.execute(message).toLowerCase().trim()
                if (!outputString.contains("password:")) {
                    return CheckResult(false, "Wrong output after inserting the message.")
                }

                val password = "mypassword"
                outputString = main.execute(password).toLowerCase().trim()
                if ( !( outputString.contains("the input image is not large enough to hold this message") && outputString.contains("task (hide, show, exit):") ) ) {
                    return CheckResult(false, "The program should check that the image size is adequate for holding the Bytes array.")
                }

            } catch (e: Exception) {
                return CheckResult(false, e.message)
            }

            outputString = main.execute("exit").toLowerCase().trim()
            if (!outputString.contains("bye!")) {
                return CheckResult(false, "Wrong output after the \"exit\" command.")
            }

            if (!main.isFinished) {
                return CheckResult(false, "Program has not terminated after the \"exit\" command.")
            }

            return CheckResult(true, "")
        }

        private fun imageHash(inputImage: BufferedImage) : String {
            val imageByteArray = ByteArray(3 * inputImage.width * inputImage.height)
            var index = 0
            for (y in 0 until inputImage.height) {
                for (x in 0 until inputImage.width) {
                    val color = Color(inputImage.getRGB(x, y))
                    imageByteArray[index] = color.red.toByte()
                    index++
                    imageByteArray[index] = color.green.toByte()
                    index++
                    imageByteArray[index] = color.blue.toByte()
                    index++
                }
            }
            val md = MessageDigest.getInstance("SHA-1")
            md.update(imageByteArray)
            return md.digest().joinToString("") { "%02x".format(it) }
        }

    }

  learner_created: false
- name: test/testimage.png
  visible: false
  learner_created: false
- name: test/out.png
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/160/stages/833/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Fri, 18 Nov 2022 20:55:13 UTC"
record: 3
